"""
Django settings for lstv_be project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
from datetime import timedelta
import os.path


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# obtain release stage
RELEASE_STAGE = os.environ.get('RELEASE_STAGE', 'development')

# get build number
if RELEASE_STAGE == 'production' or RELEASE_STAGE == 'production-mig':
    with open(BASE_DIR + '/settings/__current_build_prod__') as v_file:
        VERSION = v_file.read().strip()
else:
    with open(BASE_DIR + '/settings/__current_build__') as v_file:
        VERSION = v_file.read().strip()

BRANCH = "-none-"
try:
    print(BASE_DIR)
    with open(BASE_DIR + '/../___branch___') as v_file:
         BRANCH = v_file.read().strip()
    print(f"branch: {BRANCH}")
except FileNotFoundError:
    print("** no branch detected - normal on staging/production")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'c3ybznf0-ll5vxe=vm3y3pnegu1@mu=(prpjl5de)62=namw!5')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


ALLOWED_HOSTS = ['*']

AUTH_USER_MODEL = 'lstv_api_v1.User'

# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'lstv_api_v1',
    'lstv_api_v2',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'django.contrib.sites',
    'django.contrib.postgres',
    'corsheaders',
    'django_elasticsearch_dsl',
    'rest_framework_jwt',
    'rest_framework_jwt.blacklist'
]

SITE_ID = 1

ELASTICSEARCH_DSL = {
    "default": {
        "hosts": os.environ.get("ELASTICSEARCH_URL", "localhost:9200"),
    },
}

MIDDLEWARE = [
    'django.middleware.http.ConditionalGetMiddleware',
    'lstv_api_v1.utils.middleware.LSTVHTTPOnlyCookiesMiddleware',
    'lstv_api_v1.utils.middleware.LSTVFixDRFJSONTokenSearchIssue',
    'django.middleware.csrf.CsrfViewMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'bugsnag.django.middleware.BugsnagMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'lstv_api_v1.utils.middleware.LSTVRequestResponseMiddleware',
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8080",
    "http://0.0.0.0:8080",
    "http://0.0.0.0:3000",
    "http://10.125.63.110",
    "https://lstvtest.com",
    "https://static.lstvtest.com",
    "https://*.lstvtest.com",
    "https://isaac.lstvtest.com",
    "https://lovestoriestv.com",
    "https://isaac.lovestoriestv.com",
    "https://lstv2web-r.ngrok.io",
    "https://lstv2web-t.ngrok.io",
    "https://lstv2web-jm.ngrok.io",
    "https://lstv2web-j.ngrok.io",
    "https://lstv2web-a.ngrok.io",
    "https://lstv2web-e.ngrok.io",
    "https://lstv2server.ngrok.io",
    "https://25cf7a89f897.ngrok.io",
    "https://lstv2web2.ngrok.io"
]

CORS_ORIGIN_WHITELIST = [
    "http://localhost:8080",
    "http://0.0.0.0:8080",
    "http://0.0.0.0:3000",
    "http://10.125.63.110",
    "https://lstvtest.com",
    "https://isaac.lstvtest.com",
    "https://static.lstvtest.com",
    "https://*.lstvtest.com",
    "https://lovestoriestv.com",
    "https://isaac.lovestoriestv.com",
    "https://lstv2web-r.ngrok.io",
    "https://lstv2web-t.ngrok.io",
    "https://lstv2web-a.ngrok.io",
    "https://lstv2web-j.ngrok.io",
    "https://lstv2web-jm.ngrok.io",
    "https://lstv2web-e.ngrok.io",
    "https://lstv2server.ngrok.io",
    "https://25cf7a89f897.ngrok.io",
    "https://lstv2web2.ngrok.io"
]

CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_HTTPONLY = not DEBUG

CORS_ORIGIN_ALLOW_ALL = False

CSRF_COOKIE_NAME = "csrftoken"
CORS_ALLOW_CREDENTIALS = True

WEB_SERVER_URL = "0.0.0.0:8080"
APP_SERVER_URL = "0.0.0.0:8000"

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'X-CSRFToken',
    'x-requested-with',
    'HTTP_X_FORWARDED_FOR',
    'Access-Control-Allow-Origin',
    'Access-Control-Allow-Credentials',
    'xsrfheadername',
    'xsrfcookiename',
    'content-type',
    'x-csrftoken',
)

ROOT_URLCONF = 'lstv_be.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lstv_be.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.ScopedRateThrottle',
    ),
    'DEFAULT_THROTTLE_RATES': {
        '500/day': '500/day',
    },
    'NON_FIELD_ERRORS_KEY': None,
    'EXCEPTION_HANDLER': 'lstv_be.utils.custom_exception_handler',
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ),
}


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django_db_geventpool.backends.postgresql_psycopg2',
        'NAME': 'lstv2_prod' if BRANCH == 'main' else 'lstv2',
        'USER': os.environ.get("POSTGRES_USER", "lstv_user"),
        'PASSWORD': os.environ.get("POSTGRES_PASSWORD", "lstv_pass"),
        'HOST': os.environ.get("POSTGRES_HOST", "localhost"),
        'PORT': '5432',
        'ATOMIC_REQUESTS': False,
        'CONN_MAX_AGE': 0,
        'OPTIONS': {
            'MAX_CONNS': 20
        }
    },
    # 'migrate': {
    #     'ENGINE': 'django_db_geventpool.backends.postgresql_psycopg2',
    #     'NAME': os.environ.get('lstv1', 'lstv1'),
    #     'USER': os.environ.get('PGUSER', 'postgres'),
    #     'PASSWORD': os.environ.get('PGPASSWORD', ''),
    #     'HOST': 'localhost',
    #     'PORT': '5434',
    #     'ATOMIC_REQUESTS': False,
    #     'CONN_MAX_AGE': 0,
    #     'OPTIONS': {
    #         'MAX_CONNS': 10
    #     }
    # }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[%(asctime)s] %(levelname)s %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(funcName)s:%(lineno)d] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        # 'logstash': {
        #     '()': 'logstash_async.formatter.DjangoLogstashFormatter',
        #     'message_type': 'python-logstash',
        #     'fqdn': False,  # Fully qualified domain name. Default value: false.
        #     'extra_prefix': 'lstv',
        #     'extra': {
        #         'release': RELEASE_STAGE,
        #         'version': VERSION
        #     }
        # },
    },
    'handlers': {
        'migration': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, '../../migration.log'),
            'formatter': 'verbose'
        },
        'migration-prune': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, '../../migration-prune.log'),
            'formatter': 'verbose'
        },
        # 'logstash': {
        #     'level': 'INFO',
        #     'class': 'logstash.TCPLogstashHandler',
        #     'host': os.environ.get("LOGSTASH_URL", "localhost"),
        #     'port': 5959,  # Default value: 5959
        #     'version': 1,
        #     'message_type': 'logstash',  # 'type' field in logstash message. Default value: 'logstash'.
        #     'fqdn': False,  # Fully qualified domain name. Default value: false.
        #     'tags': None
        # },
        # 'logstash': {
        #     'level': 'DEBUG',
        #     'class': 'logstash_async.handler.AsynchronousLogstashHandler',
        #     'formatter': 'logstash',
        #     'transport': 'logstash_async.transport.TcpTransport',
        #     'host': os.environ.get("LOGSTASH_URL", "localhost"),
        #     'port': 5959,
        #     'database_path': None
        # }
    },

    'loggers': {
        'migration': {
            'handlers': ['migration'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'migration-prune': {
            'handlers': ['migration-prune'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # 'lstv-user-activity-log': {
        #     'handlers': ['logstash'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # }

    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ.get("REDIS_URL", "redis://localhost:6379/1"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "volatile": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ.get("REDIS_URL", "redis://localhost:6379/volatile"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

# third party API providers

API_KEY_ZERO_BOUNCE = os.environ.get('LSTV2_API_KEY_ZERO_BOUNCE')

# Celery

CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost/0')
CELERY_IMPORTS = (
    'lstv_api_v1.tasks.tasks',
    'lstv_api_v1.tasks.user_action_handlers'
)

# initialize bugsnag

BUGSNAG = {
    'api_key': '5fd0ab2d32e30d2a92443cf7ecc21751',
    'app_version': VERSION,
    'project_root': BASE_DIR,
    'release_stage': RELEASE_STAGE,
    'notify_release_stages': ['staging', 'production'],
}

PASSWORD_HASHERS = (
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.SHA1PasswordHasher',
    'django.contrib.auth.hashers.MD5PasswordHasher',
    'django.contrib.auth.hashers.CryptPasswordHasher',
    'hashers_passlib.phpass',
)


JWT_AUTH = {
    'JWT_ENCODE_HANDLER':
        'rest_framework_jwt.utils.jwt_encode_payload',
    'JWT_DECODE_HANDLER':
        'rest_framework_jwt.utils.jwt_decode_token',
    'JWT_PAYLOAD_HANDLER':
        'rest_framework_jwt.utils.jwt_create_payload',
    'JWT_PAYLOAD_GET_USERNAME_HANDLER':
        'rest_framework_jwt.utils.jwt_get_username_from_payload_handler',
    'JWT_RESPONSE_PAYLOAD_HANDLER':
        'lstv_be.utils.lstv_jwt_create_response_payload',
    'JWT_PAYLOAD_INCLUDE_USER_ID': True,
    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_GET_USER_SECRET_KEY': None,
    'JWT_PUBLIC_KEY': None,
    'JWT_PRIVATE_KEY': None,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_EXPIRATION_DELTA': timedelta(days=30),
    'JWT_AUDIENCE': None,
    'JWT_ISSUER': None,
    'JWT_ALLOW_REFRESH': True,
    'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=90),
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
    'JWT_AUTH_COOKIE': 'token',
    'JWT_AUTH_COOKIE_SECURE': not DEBUG,
    'JWT_AUTH_COOKIE_SAMESITE': 'Lax',
    'JWT_IMPERSONATION_COOKIE': None,
    'JWT_DELETE_STALE_BLACKLISTED_TOKENS': True,
}

#  ____   _____  ____   ____     __         ____  ____
# l    j / ___/ /    T /    T   /  ]       l    jl    j
#  |  T (   \_ Y  o  |Y  o  |  /  /  _____  |  T  |  T
#  |  |  \__  T|     ||     | /  /  |     | |  |  |  |
#  |  |  /  \ ||  _  ||  _  |/   \_ l_____j |  |  |  |
#  j  l  \    ||  |  ||  |  |\     |        j  l  j  l
# |____j  \___jl__j__jl__j__j \____j       |____j|____j

# slack credentials

SLACK_BOT_USER_ID = "U01DN3K379R"
VERIFICATION_TOKEN = "pHlU7aMLfTn09MDMO8tutXam"
OAUTH_ACCESS_TOKEN = "************"
BOT_USER_ACCESS_TOKEN = "xoxb-17730972227-1464121109331-5cWtyif2rH2Z5O4DL70zYYK7"
CLIENT_ID = "17730972227.1457176905798"
CLIENT_SECRET = "83ca1f6eae437f6c3da0f005f2ab5350"

# contexts and actions

ISAAC_CONTEXT_BUSINESS_INQUIRY = "business-inquiry"
ISAAC_CONTEXT_BUSINESS_INQUIRY_PRE_APPROVED = "business-inquiry-pre-approved"
ISAAC_CONTEXT_BUSINESS_INQUIRY_ACTION_REJECT_REASON = "reject-reason"
ISAAC_CONTEXT_BUSINESS_INQUIRY_ACTION_APPROVE = "approve"
ISAAC_CONTEXT_BUSINESS_INQUIRY_ACTION_REJECT = "reject"
ISAAC_CONTEXT_BUSINESS_INQUIRY_ACTION_REJECT_BLOCK = "reject-block"

# channels

SLACK_CHANNEL_BUSINESS_INQUIRIES = "G01DT1C3E58"
SLACK_CHANNEL_BUSINESS_INQUIRIES_PRE_APPROVED = "G01DT1C3E58"

SLACK_CHANNEL_BUSINESS_INQUIRIES_TEST = "C022CJPV15L"
SLACK_CHANNEL_BUSINESS_INQUIRIES_PRE_APPROVED_TEST = "C022CJPV15L"


SLACK_CHANNEL_GRAPEVINE = "G01EBNJQT40"

# CDN/S3 BUCKET

DEFAULT_CDN = "https://cdn.lstvtest.com"
DEFAULT_CDN_DISTRIBUTION_ID = "E186242FOCTBSC"
DEFAULT_CDN_BUCKET_URL = "https://lstv2-public.s3.us-east-2.amazonaws.com"
DEFAULT_CDN_BUCKET_NAME = "lstv2-public"
DEFAULT_APP_STATIC_BUCKET_NAME = "lstvtest.com"

# hubspot

HUBSPOT_API_KEY = os.environ.get("HUBSPOT_API_KEY", "")

# mailchimp

MAILCHIMP_API_TOKEN = os.environ.get("MAILCHIMP_API_TOKEN", "")
MAILCHIMP_AUDIENCE_ID = os.environ.get("MAILCHIMP_AUDIENCE_ID", "")
